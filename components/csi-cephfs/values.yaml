rbac:
  create: true
  leastPrivileges: true

provisioner:
  replicaCount: 1

# Configuration for the CSI to connect to the cluster
# See: https://github.com/ceph/ceph-csi/blob/devel/examples/README.md
# See: https://github.com/ceph/ceph-csi/blob/devel/deploy/csi-config-map-sample.yaml
# Example:
csiConfig:
  # the clusterID should uniquely identify a given ceph cluster
  # it is also used by the storage class
  # we are using the output of "ceph fsid"
  - clusterID: "94563514-dd45-48e9-80b0-ba2f058f6d30"
    monitors:
      - 192.168.9.20
      - 192.168.9.21
      - 192.168.9.22
    cephFS:
      # subvolumes will be created in this subvolume group, which needs to be created in
      # the CephFS volume beforehand
      # each PV will get its own subvolume
      subvolumeGroup: "k8s"
      # we use a separate namespace, so that our objects don't end up in the default namespace
      radosNamespace: "fsvolumens_nekropolis-csi-cephfs"
      # i think we can leave this unconfigued
      # see: https://github.com/ceph/ceph-csi/tree/devel/examples#running-cephcsi-with-pod-networking 
      # see: https://github.com/ceph/ceph-csi/issues/3113
      # see: https://forum.proxmox.com/threads/rbd-map-fails.132660/
      #netNamespaceFilePath: "{{ .kubeletDir }}/plugins/{{ .driverName }}/net"

# we create this separately
secret:
  create: false

# This is a sample configmap that helps define a Ceph configuration as required
# by the CSI plugins.
# Sample ceph.conf available at
# https://github.com/ceph/ceph/blob/master/src/sample.ceph.conf Detailed
# documentation is available at
# https://docs.ceph.com/en/latest/rados/configuration/ceph-conf/
cephconf: |
  [global]
    auth_cluster_required = cephx
    auth_service_required = cephx
    auth_client_required = cephx

    # ceph-fuse which uses libfuse2 by default has write buffer size of 2KiB
    # adding 'fuse_big_writes = true' option by default to override this limit
    # see https://github.com/ceph/ceph-csi/issues/1928
    fuse_big_writes = true

storageClass:
  create: true
  name: cephfs
  annotations:
      storageclass.kubernetes.io/is-default-class: "true"

  # String representing a Ceph cluster to provision storage from.
  # Should be unique across all Ceph clusters in use for provisioning,
  # cannot be greater than 36 bytes in length, and should remain immutable for
  # the lifetime of the StorageClass in use.
  clusterID: "94563514-dd45-48e9-80b0-ba2f058f6d30"
  # (required) CephFS filesystem name into which the volume shall be created
  fsName: cephfs
  # NOTE_TO_SELF: I think this should be based on where the CephFS filesystem is stored, no?
  # (optional) Ceph pool into which volume data shall be stored
  # pool: <cephfs-data-pool>
  # For eg:
  # pool: "replicapool"
  pool: ""
  # (optional) Comma separated string of Ceph-fuse mount options.
  # For eg:
  # fuseMountOptions: debug
  fuseMountOptions: ""
  # (optional) Comma separated string of Cephfs kernel mount options.
  # Check man mount.ceph for mount options. For eg:
  # kernelMountOptions: readdir_max_bytes=1048576,norbytes
  kernelMountOptions: ""
  # (optional) The driver can use either ceph-fuse (fuse) or
  # ceph kernelclient (kernel).
  # If omitted, default volume mounter will be used - this is
  # determined by probing for ceph-fuse and mount.ceph
  # mounter: kernel
  mounter: ""
  # (optional) Prefix to use for naming subvolumes.
  # If omitted, defaults to "csi-vol-".
  # volumeNamePrefix: "foo-bar-"
  volumeNamePrefix: ""

  # (optional) Instruct the plugin it has to encrypt the volume
  # By default it is disabled. Valid values are "true" or "false".
  # A string is expected here, i.e. "true", not true.
  # encrypted: "true"
  encrypted: "false"

  # (optional) Use external key management system for encryption passphrases by
  # specifying a unique ID matching KMS ConfigMap. The ID is only used for
  # correlation to configmap entry.
  encryptionKMSID: ""

  # The secrets have to contain user and/or Ceph admin credentials.
  provisionerSecret: csi-cephfs-secret
  # If the Namespaces are not specified, the secrets are assumed to
  # be in the Release namespace.
  # (we set this in the kustomization.yaml)
  provisionerSecretNamespace: ""
  controllerExpandSecret: csi-cephfs-secret
  controllerExpandSecretNamespace: ""
  nodeStageSecret: csi-cephfs-secret
  nodeStageSecretNamespace: ""
  reclaimPolicy: Delete
  allowVolumeExpansion: true
  mountOptions: []
  # Mount Options
  # Example:
  # mountOptions:
  #   - discard
